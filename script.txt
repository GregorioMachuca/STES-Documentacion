SELECT * FROM GREGO.CLIENTE;
CREATE USER GREGO IDENTIFIED BY "Gregolml95"
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP";
GRANT "CONNECT" TO GREGO;

--ROLES--

--crear usuario dba con sus roles y privilegios--
create user Santos IDENTIFIED BY ISAAC;

GRANT CONNECT to Santos;
GRANT CREATE SESSION TO Santos;
GRANT CREATE SEQUENCE TO Santos;
GRANT CREATE TRIGGER TO Santos;
GRANT CREATE VIEW TO Santos;
GRANT CREATE TABLE TO Santos;

CREATE ROLE DBADMIN;
GRANT CREATE VIEW TO DBADMIN;
GRANT CREATE SESSION TO DBADMIN;
GRANT CREATE SEQUENCE TO DBADMIN;
GRANT CREATE TRIGGER TO DBADMIN;
GRANT CREATE VIEW TO DBADMIN;
GRANT CREATE TABLE TO DBADMIN;

GRANT DBADMIN TO Santos;

SHOW USER;
GRANT select,insert,update,delete ON GREGO.CLIENTE TO DBADMIN;
GRANT SELECT ON GREGO.CLIENTE TO DBADMIN;
REVOKE SELECT ON GREGO.CLIENTE FROM DBADMIN;
REVOKE DBADMIN FROM Santos;
REVOKE SELECT,INSERT,UPDATE,DELETE ON GREGO.CLIENTE FROM DBADMIN;

-- DICCIONARIO DE DATOS
SELECT 
X.TABLE_NAME NOMBRE_TABLA, X.COLUMN_ID POSICION, 
LLAVE,
X.COLUMN_NAME NOMBRE_COLUMNA, 
DATA_TYPE TIPO_DATO, DATA_LENGTH LONGITUD, COMMENTS COMENTARIO
FROM
(
    SELECT A.TABLE_NAME, A.COLUMN_ID, A.COLUMN_NAME,
    A.DATA_TYPE, A.DATA_LENGTH, 
    B.COMMENTS

    FROM USER_TAB_COLUMNS A
    LEFT JOIN USER_COL_COMMENTS B
    ON A.TABLE_NAME = B.TABLE_NAME
    AND A.COLUMN_NAME=B.COLUMN_NAME
    WHERE 
    A.TABLE_NAME NOT LIKE '%$%' 
    AND A.TABLE_NAME NOT LIKE 'SCHED%'
    AND A.TABLE_NAME NOT LIKE 'MVIEW%'
    AND B.COMMENTS IS NOT NULL
) X 
LEFT JOIN
(
    SELECT UC.TABLE_NAME, COLUMN_NAME, 
    CASE CONSTRAINT_TYPE 
        WHEN 'P' THEN 'PK' 
        WHEN 'R' THEN 'FK'
    END LLAVE
    FROM USER_CONSTRAINTS UC
    LEFT JOIN USER_CONS_COLUMNS UCC
    ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
    WHERE UC.CONSTRAINT_TYPE='P'
    OR UC.CONSTRAINT_TYPE='R'
) Y
ON X.TABLE_NAME=Y.TABLE_NAME 
AND X.COLUMN_NAME = Y.COLUMN_NAME
ORDER BY X.TABLE_NAME, X.COLUMN_ID;

-- TABLAS CATALOGO
create table Cliente (
COMMENT ON TABLE CLIENTE IS 'TABLA PARA IDENTIFICAR SI LA PERSONA ES CLIENTE O EMPLEADO'
DUI VARCHAR (9) NOT NULL,
COMMENT ON COLUMN CLIENTE.DUI IS 'CAMPO PRIMARIO DE LA TABLA Y SIRVE PARA IDENTIFICAR A LA PERSONAS '
Nombre VARCHAR2 (50) NOT NULL,
COMMENT ON COLUMN CLIENTE.Nombre IS 'CAMPO PARA EL NOMBRE DE LOS CLIENTES O EMPLEADOS'
NumeroTelefono VARCHAR2 (12) NOT NULL,
COMMENT ON COLUMN CLIENTE.NumeroTelefono IS 'CAMPO PARA EL CELULAR DE LOS CLIENTES O EMPLEADOS'
Direccion VARCHAR2 (70) NOT NULL,
COMMENT ON COLUMN CLIENTE.Direccion IS 'CAMPO PARA DIRECCION EMPLEADO O CLIENTE'
Residencia VARCHAR2 (50)NOT NULL,
COMMENT ON COLUMN CLIENTE.Residencia IS 'CAMPO PARA LUGAR DONDE RESIDE EL EMPLEADO O CLIENTE'
Email VARCHAR2 (50) NOT NULL,
COMMENT ON COLUMN CLIENTE.Email IS 'CAMPO PARA EL EMAIL DE LOS EMPLEADOS O CLIENTES'
Genero CHAR(1) CONSTRAINT CH_GENERO CHECK (GENERO IN ('M','F')) NOT NULL,
COMMENT ON COLUMN CLIENTE.Genero IS 'CAMPO PARA EL GENERO DE LOS EMPLEADOS O CLIENTES'
Estado VARCHAR2 (10) NOT NULL,
COMMENT ON COLUMN CLIENTE.Estado IS 'CAMPO PARA SABER SI EL USUARIO ESTA ACTIVO O INACTIVO'
TipodePersonas VARCHAR2 (20) NOT NULL,
COMMENT ON COLUMN CLIENTE.TipodePersonas IS 'ESTE CAMPO SIRVE PARA SABER EN EL SISTEMA SI LA PERSONA ES CLIENTE O EMPLEADO '
Rol_Usuario VARCHAR2(45) NOT NULL,
COMMENT ON COLUMN CLIENTE.Rol_Usuario IS 'CAMPO PARA DEFINIR EN EL SISTEMA SI ES EMPLEADO O CLIENTE '
Usuario_creo VARCHAR2 (40),
COMMENT ON COLUMN CLIENTE.Usuario_creo IS 'CAMPO PARA SABER CUANDO SE CREO UN REGISTRO'
Fecha_creo DATE,
COMMENT ON COLUMN CLIENTE.Fecha_creo IS 'CAMPO PARA SABER LA FECHA DE CUANDO SE CREO UN REGISTRO'
Usuario_modi VARCHAR2 (40),
COMMENT ON COLUMN CLIENTE.Usuario_modi IS 'CAMPO PARA SABER CUANDO UN REGISTRO SE MODIFICA'
Fecha_modi DATE,
COMMENT ON COLUMN CLIENTE.Fecha_modi IS 'CAMPO PARA SABER CUANDO LA FECHA DE UN REGISTRO SE MODIFICA'
CONSTRAINT PK_DUI
PRIMARY KEY(DUI)
);

create table Viaje (
ViajeID VARCHAR2 (15) NOT NULL,
Zona_Turistica VARCHAR2 (15) NOT NULL,
Ubicacion VARCHAR2 (10) NOT NULL,
Direccion VARCHAR2 (20) NOT NULL,
Horarios DATE NOT NULL,
TelefonoLugar VARCHAR2 (10),
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_ViajeID
PRIMARY KEY(viajeid)
);

create table Flota (
Matricula VARCHAR2 (15) NOT NULL,
Marca VARCHAR2 (10) NOT NULL,
Modelo VARCHAR2 (15) NOT NULL,
Capacidad VARCHAR2 (5) NOT NULL,
Combustible VARCHAR2 (10) NOT NULL,
Tipo_vehiculo VARCHAR2 (10) NOT NULL,
Estado VARCHAR (8) NOT NULL,
Tarifa_kilometro NUMBER (3,2) NOT NULL,
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE
);

-- TABLAS TRANSACCIONALES
create table Ruta(
RutaID NCHAR (7) NOT NULL,
DUI VARCHAR2 (9) NOT NULL,
ViajeID VARCHAR2 (15) NOT NULL,
Direccion_Salida VARCHAR2 (15),
Kilometraje VARCHAR2 (7),
Hora_Salida TIMESTAMP NOT NULL,
Hora_Llegada TIMESTAMP NOT NULL,
Tarifa NUMBER (3,2) NOT NULL,
Fecha DATE NOT NULL,
Disponibilidad VARCHAR2 (10)NOT NULL,
Asientos_Personas VARCHAR2 (4)NOT NULL,
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_RutaID
PRIMARY KEY(RutaID)
);

ALTER TABLE RUTA
ADD CONSTRAINT FK_Cliente
FOREIGN KEY (DUI)
REFERENCES Cliente(DUI);

ALTER TABLE RUTA
ADD CONSTRAINT FK_Viaje
FOREIGN KEY (ViajeID)
REFERENCES Viaje(ViajeID);

create table MetodosdePago (
MPagoID NUMBER (3,2) NOT NULL,
DUI VARCHAR2 (9) NOT NULL, 
RutaID NCHAR (7) NOT NULL,
RutadetalleID VARCHAR2 (15) NOT NULL,
Tipo_pago VARCHAR2 (15) NOT NULL,
Tarjeta VARCHAR2 (10) NOT NULL,
EstadodePago VARCHAR2 (8) NOT NULL,
Banco VARCHAR2 (10) NOT NULL,
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_MPagoID
PRIMARY KEY (MPagoID)
);

ALTER TABLE METODOSDEPAGO
ADD CONSTRAINT FK_Cliente2
FOREIGN KEY (DUI)
REFERENCES Cliente(DUI);

ALTER TABLE METODOSDEPAGO
ADD CONSTRAINT FK_RUTA
FOREIGN KEY (RUTAID)
REFERENCES RUTA(RUTAID);

ALTER TABLE METODOSDEPAGO
ADD CONSTRAINT FK_RUTADETALLE
FOREIGN KEY (RUTADETALLEID)
REFERENCES RUTADETALLE(RUTADETALLEID);

create table RutaDetalle(
COMMENT ON TABLE RUTADETALLE IS 'TABLA QUE SIRVE PARA MOSTRAR TODOS LOS DATOS REFERENTES DETALLADOS DEL VIAJE'
RutadetalleID VARCHAR2 (12) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.RutadetalleID IS 'CAMPO PARA COMO NUMERO SECUENCIAL Y LLAVE PRIMARIA DE LA TABLA'
RutaID NCHAR (7) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.RutaID IS 'CAMPO DE LLAVE FORANEA QUE HACE REFERENCIA A LA RELACION CON LA TABLA PADRE LLAMADA RUTA'
Tarifa_por_Viaje NUMBER (3,2) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.Tarifa_por_Viaje IS 'CAMPO QUE MUESTRA LAS TARIFAS POR VIAJE'
Capacidad_vehiculo VARCHAR2 (8) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.Capacidad_vehiculo IS 'CAMPO DE LLAVE FORANEA QUE HACE REFERENCIA A LA CAPACIDAD QUE TIENEN LOS VEHICULOS DE LA FLOTA'
Matricula VARCHAR2 (12) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.Matricula IS 'CAMPO DE LLAVE FORANEA QUE HACE REFERENCIA A LA RELACION CON LA TABLA LLAMADA FLOTA'
Usuario_creo VARCHAR2 (40),
COMMENT ON COLUMN RUTADETALLE.Usuario_creo IS 'CAMPO PARA SABER CUANDO SE CREO UN REGISTRO'
Fecha_creo DATE,
COMMENT ON COLUMN RUTADETALLE.Fecha_creo IS 'CAMPO PARA SABER LA FECHA DE CUANDO SE CREO UN REGISTRO'
Usuario_modi VARCHAR2 (40),
COMMENT ON COLUMN RUTADETALLE.Usuario_modi IS 'CAMPO PARA SABER CUANDO UN REGISTRO SE MODIFICA'
Fecha_modi DATE,
COMMENT ON COLUMN RUTADETALLE.Fecha_modi IS 'CAMPO PARA SABER CUANDO LA FECHA DE UN REGISTRO SE MODIFICA'
CONSTRAINT PK_RutadetalleID
PRIMARY KEY (RutadetalleID)
);

ALTER TABLE RUTADETALLE
ADD CONSTRAINT FK_RUTA2
FOREIGN KEY (RUTAID)
REFERENCES RUTA(RUTAID);

create table Aranceles(
Idaranceles VARCHAR2 (12) NOT NULL,
ViajeID VARCHAR2 (15) NOT NULL,
Costo_mayoresedad NUMBER (2,2),
Costo_menoresedad NUMBER (2,2),
Costo_entrada NUMBER (2,2),
Costo_Hospedaje NUMBER (3,2),
Costo_grupopersonas NUMBER (3,2),
Costo_por_vehiculo NUMBER (2,2),
Costo_carroextra NUMBER (2,2),
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_IDaranceles
PRIMARY KEY (IDaranceles)
);

ALTER TABLE ARANCELES
ADD CONSTRAINT FK_Viaje2
FOREIGN KEY (ViajeID)
REFERENCES Viaje(ViajeID);

-- TRIGGER PARA TABLA CLIENTE AGREGAR
CREATE OR REPLACE TRIGGER TG_CLIENTE BEFORE INSERT 
ON  CLIENTE
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA UPDATE CLIENTE
CREATE OR REPLACE TRIGGER TG_CLIENTE 
BEFORE UPDATE 
ON CLIENTE 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;



-- PROCEDIMIENTO ALMACENADO PARA AGREGAR CLIENTES
CREATE OR REPLACE PROCEDURE ADICIONA_CLIENTE (ADUI IN VARCHAR2, ANOMBRE IN VARCHAR2, ANUMEROTELEFONO IN VARCHAR2, ADIRECCION IN VARCHAR2,
ARESIDENCIA IN VARCHAR2, AEMAIL IN VARCHAR2, AGENERO IN CHAR, AESTADO IN VARCHAR2, ATIPODEPERSONAS IN VARCHAR2, AROL_USUARIO IN VARCHAR2) AS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO CLIENTE (DUI, NOMBRE, NUMEROTELEFONO, DIRECCION, RESIDENCIA, EMAIL, GENERO, ESTADO,TIPODEPERSONAS, ROL_USUARIO) 
  VALUES (ADUI, ANOMBRE, ANUMEROTELEFONO, ADIRECCION, ARESIDENCIA, AEMAIL, AGENERO, AESTADO, ATIPODEPERSONAS, AROL_USUARIO);
  IMP := (SQL%ROWCOUNT||' REGISTRO INGRESADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YA EXISTE UNA PERSONA CON ESE DUI');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INGRESAR REGISTRO');
END;
-- EJECUTAR PARA ACTIVAR SALIDA
SET SERVEROUTPUT ON
-- EJECUTAR PROCEDIMIENTO
EXECUTE ADICIONA_CLIENTE ( '00129300-6', 'ISAAC', '70713269', 'NUEVA GUADALUPE', 'NUEVA GUADALUPE', 'isaac@gmail.com', 'M', 'ACTIVO', 'CLIENTE', 'CLI-01');
SELECT * FROM CLIENTE;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR CLIENTE
CREATE OR REPLACE PROCEDURE MODIFICA_CLIENTE  (EDUI IN VARCHAR2, ENOMBRE IN VARCHAR2, ENUMEROTELEFONO IN VARCHAR2, EDIRECCION IN VARCHAR2,
ERESIDENCIA IN VARCHAR2, EEMAIL IN VARCHAR2, EGENERO IN CHAR, EESTADO IN VARCHAR2, ETIPODEPERSONAS IN VARCHAR2, EROL_USUARIO IN VARCHAR2)
AS
ROWSM VARCHAR2(30);
BEGIN
  UPDATE CLIENTE SET NOMBRE = ENOMBRE, NUMEROTELEFONO = ENUMEROTELEFONO, DIRECCION = EDIRECCION ,RESIDENCIA = ERESIDENCIA, EMAIL = EEMAIL, 
  GENERO = EGENERO ,ESTADO = EESTADO, TIPODEPERSONAS = ETIPODEPERSONAS,  ROL_USUARIO = EROL_USUARIO WHERE DUI = EDUI;
  ROWSM := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(ROWSM);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;
-- EJECUTAR PROCEDIMIENTO
EXECUTE MODIFICA_PERSONA( 'ENOCSITO', '70713269', 'NUEVA GUADALUPE', 'NUEVA GUADALUPE', 'isaac@gmail.com', 'M', 'ACTIVO', 'CLIENTE', 'CLI-01', &DUI);

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR CLIENTE
CREATE OR REPLACE PROCEDURE ELIMINA_CLIENTE (IDUI IN VARCHAR)
AS
ROWSM VARCHAR2(30);
BEGIN
  DELETE FROM CLIENTE WHERE DUI = IDUI;
  ROWSM := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(ROWSM);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;
-- EJECUTAR PROCEDIMIENTO
EXECUTE ELIMINA_CLIENTE(&DUI);

-- TABLAS TRANSACCIONALES
-- TRIGGER PARA TABLA RUTADETALLE
CREATE OR REPLACE TRIGGER TG_RUTADETALLE BEFORE INSERT 
ON RUTADETALLE
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA TABLA RUTADETALLE
CREATE OR REPLACE TRIGGER TG_RUTADETALLE BEFORE UPDATE 
ON RUTADETALLE
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO INSERT
CREATE OR REPLACE PROCEDURE ADICIONA_ARANCELES (EIDARANCELES IN VARCHAR2, EVIAJEID IN VARCHAR2, ECOSTO_MAYORESEDAD IN NUMBER, ECOSTO_MENORESEDAD IN NUMBER,
ECOSTO_ENTRADA IN NUMBER, ECOSTO_HOSPEDAJE IN NUMBER, ECOSTO_GRUPOPERSONAS IN NUMBER, ECOSTO_POR_VEHICULO IN NUMBER, ECOSTO_CARROEXTRA IN NUMBER)
AS
ROWSM VARCHAR2(30);
NUID NUMBER(3);
BEGIN
SELECT IDARANCELES INTO NUID FROM ARANCELES WHERE IDARANCELES = EIDARANCELES;
  --IF SIDS = NULL
   -- THEN
      DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL REGISTRO ');
    --ELSE
      INSERT INTO ARANCELES (IDARANCELES, VIAJEID, COSTO_MAYORESEDAD, COSTO_MENORESEDAD, COSTO_ENTRADA, COSTO_HOSPEDAJE, COSTO_GRUPOPERSONAS, COSTO_POR_VEHICULO, COSTO_CARROEXTRA) 
      VALUES (EIDARANCELES, EVIAJEID, ECOSTO_MAYORESEDAD, ECOSTO_MENORESEDAD, ECOSTO_ENTRADA, ECOSTO_HOSPEDAJE, ECOSTO_GRUPOPERSONAS, ECOSTO_POR_VEHICULO, ECOSTO_CARROEXTRA)  ;
      ROWSM := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
      DBMS_OUTPUT.PUT_LINE(ROWSM);
    --END IF;
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR REGISTRO CON MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL REGISTRO');
END;


-- EJECUTAR PROCEDIMIENTO
EXECUTE ADICIONA_ARANCELES(&VIAJEID, 1, '44', 3 ,2, 4, 5,6,4,1);

-- EJECUTAR PARA VER REGISTROS DE LA TABLA
SELECT * FROM ARANCELES;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR ARANCELES
CREATE OR REPLACE PROCEDURE MODIFICA_ARANCELES (MIDARANCELES IN VARCHAR2,MVIAJEID IN VARCHAR2,MCOSTO_MAYORESEDAD IN NUMBER, MCOSTO_MENORESEDAD IN NUMBER,
MCOSTO_ENTRADA IN NUMBER, MCOSTO_HOSPEDAJE IN NUMBER, MCOSTO_GRUPOPERSONAS IN NUMBER, MCOSTO_POR_VEHICULO IN NUMBER, MCOSTO_CARROEXTRA IN NUMBER)
AS
ROWSM VARCHAR2(30);
NUID NUMBER(3);
BEGIN
  SELECT VIAJEID INTO NUID FROM VIAJE WHERE VIAJEID = MVIAJEID;
 DBMS_OUTPUT.PUT_LINE(NUID);
 IF NUID IS NULL THEN
  DBMS_OUTPUT.PUT_LINE('NO HAY NADA');
 ELSE
  UPDATE ARANCELES SET COSTO_MAYORESEDAD =  MCOSTO_MAYORESEDAD, COSTO_MENORESEDAD = MCOSTO_MENORESEDAD, COSTO_ENTRADA = MCOSTO_ENTRADA, COSTO_HOSPEDAJE = MCOSTO_HOSPEDAJE, COSTO_GRUPOPERSONAS = MCOSTO_GRUPOPERSONAS, COSTO_POR_VEHICULO = MCOSTO_POR_VEHICULO, COSTO_CARROEXTRA = MCOSTO_CARROEXTRA WHERE IDARANCELES = MIDARANCELES;
  ROWSM := (SQL%ROWCOUNT||' REGISTRO ACTUALIZADO');
  DBMS_OUTPUT.PUT_LINE(ROWSM);
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO EXISTE ');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;
-- EJECUTAR PROCEDIMIENTO
EXECUTE MODIFICA_ARANCELES ();
SELECT * FROM ARANCELES;

connect Grego/Gregolml95;
GRANT rol_admin TO GREGO;
SELECT * FROM DICT
GRANT SOLOVISTA TO GREGO;
GRANT CREATE SEQUENCE TO DBADMIN;
create table Cliente (
DUI VARCHAR (9) NOT NULL CONSTRAINT PK_DUI PRIMARY KEY,
Nombre VARCHAR2 (50) NOT NULL,
NumeroTelefono VARCHAR2 (12) NOT NULL,
Direccion VARCHAR2 (70) NOT NULL,
Residencia VARCHAR2 (50)NOT NULL,
Email VARCHAR2 (50) NOT NULL,
Genero VARCHAR2 (10) NOT NULL,
Estado VARCHAR2 (10) NOT NULL,
TipodePersonas VARCHAR2 (20) NOT NULL,
Rol_Usuario VARCHAR2(45) NOT NULL,
Usuario_creo VARCHAR2 (40) NOT NULL,
Fecha_creo DATE NOT NULL,
Usuario_modi VARCHAR2 (40) NOT NULL,
Fecha_modi DATE NOT NULL
);
SELECT * FROM DICT_COLUMNS
CREATE USER GREGO IDENTIFIED BY "Gregolml95"
DEFAULT TABLESPACE "USERS"
TEMPORARY TABLESPACE "TEMP";
GRANT "CONNECT" TO GREGO;

--ROLES--

--crear usuario dba con sus roles y privilegios--
create user Santos IDENTIFIED BY ISAAC;

GRANT CONNECT to Santos;
GRANT CREATE SESSION TO Santos;
GRANT CREATE SEQUENCE TO Santos;
GRANT CREATE TRIGGER TO Santos;
GRANT CREATE VIEW TO Santos;
GRANT CREATE TABLE TO Santos;

CREATE ROLE DBADMIN;
GRANT CREATE VIEW TO DBADMIN;
GRANT CREATE SESSION TO DBADMIN;
GRANT CREATE SEQUENCE TO DBADMIN;
GRANT CREATE TRIGGER TO DBADMIN;
GRANT CREATE VIEW TO DBADMIN;
GRANT CREATE TABLE TO DBADMIN;

GRANT DBADMIN TO Santos;

SHOW USER;
GRANT select,insert,update,delete ON GREGO.CLIENTE TO DBADMIN;
GRANT SELECT ON GREGO.CLIENTE TO DBADMIN;
REVOKE SELECT ON GREGO.CLIENTE FROM DBADMIN;
REVOKE DBADMIN FROM Santos;
REVOKE SELECT,INSERT,UPDATE,DELETE ON GREGO.CLIENTE FROM DBADMIN;

-- DICCIONARIO DE DATOS
SELECT 
X.TABLE_NAME NOMBRE_TABLA, X.COLUMN_ID POSICION, 
LLAVE,
X.COLUMN_NAME NOMBRE_COLUMNA, 
DATA_TYPE TIPO_DATO, DATA_LENGTH LONGITUD, COMMENTS COMENTARIO
FROM
(
    SELECT A.TABLE_NAME, A.COLUMN_ID, A.COLUMN_NAME,
    A.DATA_TYPE, A.DATA_LENGTH, 
    B.COMMENTS

    FROM USER_TAB_COLUMNS A
    LEFT JOIN USER_COL_COMMENTS B
    ON A.TABLE_NAME = B.TABLE_NAME
    AND A.COLUMN_NAME=B.COLUMN_NAME
    WHERE 
    A.TABLE_NAME NOT LIKE '%$%' 
    AND A.TABLE_NAME NOT LIKE 'SCHED%'
    AND A.TABLE_NAME NOT LIKE 'MVIEW%'
    AND B.COMMENTS IS NOT NULL
) X 
LEFT JOIN
(
    SELECT UC.TABLE_NAME, COLUMN_NAME, 
    CASE CONSTRAINT_TYPE 
        WHEN 'P' THEN 'PK' 
        WHEN 'R' THEN 'FK'
    END LLAVE
    FROM USER_CONSTRAINTS UC
    LEFT JOIN USER_CONS_COLUMNS UCC
    ON UC.CONSTRAINT_NAME = UCC.CONSTRAINT_NAME
    WHERE UC.CONSTRAINT_TYPE='P'
    OR UC.CONSTRAINT_TYPE='R'
) Y
ON X.TABLE_NAME=Y.TABLE_NAME 
AND X.COLUMN_NAME = Y.COLUMN_NAME
ORDER BY X.TABLE_NAME, X.COLUMN_ID;

-- TABLAS CATALOGO
create table Cliente (
COMMENT ON TABLE CLIENTE IS 'TABLA PARA IDENTIFICAR SI LA PERSONA ES CLIENTE O EMPLEADO'
DUI VARCHAR (9) NOT NULL,
COMMENT ON COLUMN CLIENTE.DUI IS 'CAMPO PRIMARIO DE LA TABLA Y SIRVE PARA IDENTIFICAR A LA PERSONAS '
Nombre VARCHAR2 (50) NOT NULL,
COMMENT ON COLUMN CLIENTE.Nombre IS 'CAMPO PARA EL NOMBRE DE LOS CLIENTES O EMPLEADOS'
NumeroTelefono VARCHAR2 (12) NOT NULL,
COMMENT ON COLUMN CLIENTE.NumeroTelefono IS 'CAMPO PARA EL CELULAR DE LOS CLIENTES O EMPLEADOS'
Direccion VARCHAR2 (70) NOT NULL,
COMMENT ON COLUMN CLIENTE.Direccion IS 'CAMPO PARA DIRECCION EMPLEADO O CLIENTE'
Residencia VARCHAR2 (50)NOT NULL,
COMMENT ON COLUMN CLIENTE.Residencia IS 'CAMPO PARA LUGAR DONDE RESIDE EL EMPLEADO O CLIENTE'
Email VARCHAR2 (50) NOT NULL,
COMMENT ON COLUMN CLIENTE.Email IS 'CAMPO PARA EL EMAIL DE LOS EMPLEADOS O CLIENTES'
Genero CHAR(1) CONSTRAINT CH_GENERO CHECK (GENERO IN ('M','F')) NOT NULL,
COMMENT ON COLUMN CLIENTE.Genero IS 'CAMPO PARA EL GENERO DE LOS EMPLEADOS O CLIENTES'
Estado VARCHAR2 (10) NOT NULL,
COMMENT ON COLUMN CLIENTE.Estado IS 'CAMPO PARA SABER SI EL USUARIO ESTA ACTIVO O INACTIVO'
TipodePersonas VARCHAR2 (20) NOT NULL,
COMMENT ON COLUMN CLIENTE.TipodePersonas IS 'ESTE CAMPO SIRVE PARA SABER EN EL SISTEMA SI LA PERSONA ES CLIENTE O EMPLEADO '
Rol_Usuario VARCHAR2(45) NOT NULL,
COMMENT ON COLUMN CLIENTE.Rol_Usuario IS 'CAMPO PARA DEFINIR EN EL SISTEMA SI ES EMPLEADO O CLIENTE '
Usuario_creo VARCHAR2 (40),
COMMENT ON COLUMN CLIENTE.Usuario_creo IS 'CAMPO PARA SABER CUANDO SE CREO UN REGISTRO'
Fecha_creo DATE,
COMMENT ON COLUMN CLIENTE.Fecha_creo IS 'CAMPO PARA SABER LA FECHA DE CUANDO SE CREO UN REGISTRO'
Usuario_modi VARCHAR2 (40),
COMMENT ON COLUMN CLIENTE.Usuario_modi IS 'CAMPO PARA SABER CUANDO UN REGISTRO SE MODIFICA'
Fecha_modi DATE,
COMMENT ON COLUMN CLIENTE.Fecha_modi IS 'CAMPO PARA SABER CUANDO LA FECHA DE UN REGISTRO SE MODIFICA'
CONSTRAINT PK_DUI
PRIMARY KEY(DUI)
);

create table Viaje (
ViajeID VARCHAR2 (15) NOT NULL,
Zona_Turistica VARCHAR2 (15) NOT NULL,
Ubicacion VARCHAR2 (10) NOT NULL,
Direccion VARCHAR2 (20) NOT NULL,
Horarios DATE NOT NULL,
TelefonoLugar VARCHAR2 (10),
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_ViajeID
PRIMARY KEY(viajeid)
);

create table Flota (
Matricula VARCHAR2 (15) NOT NULL,
Marca VARCHAR2 (10) NOT NULL,
Modelo VARCHAR2 (15) NOT NULL,
Capacidad VARCHAR2 (5) NOT NULL,
Combustible VARCHAR2 (10) NOT NULL,
Tipo_vehiculo VARCHAR2 (10) NOT NULL,
Estado VARCHAR (8) NOT NULL,
Tarifa_kilometro NUMBER (3,2) NOT NULL,
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE
);

-- TABLAS TRANSACCIONALES
create table Ruta(
RutaID NCHAR (7) NOT NULL,
DUI VARCHAR2 (9) NOT NULL,
ViajeID VARCHAR2 (15) NOT NULL,
Direccion_Salida VARCHAR2 (15),
Kilometraje VARCHAR2 (7),
Hora_Salida TIMESTAMP NOT NULL,
Hora_Llegada TIMESTAMP NOT NULL,
Tarifa NUMBER (3,2) NOT NULL,
Fecha DATE NOT NULL,
Disponibilidad VARCHAR2 (10)NOT NULL,
Asientos_Personas VARCHAR2 (4)NOT NULL,
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_RutaID
PRIMARY KEY(RutaID)
);

ALTER TABLE RUTA
ADD CONSTRAINT FK_Cliente
FOREIGN KEY (DUI)
REFERENCES Cliente(DUI);

ALTER TABLE RUTA
ADD CONSTRAINT FK_Viaje
FOREIGN KEY (ViajeID)
REFERENCES Viaje(ViajeID);

create table MetodosdePago (
MPagoID NUMBER (3,2) NOT NULL,
DUI VARCHAR2 (9) NOT NULL, 
RutaID NCHAR (7) NOT NULL,
RutadetalleID VARCHAR2 (15) NOT NULL,
Tipo_pago VARCHAR2 (15) NOT NULL,
Tarjeta VARCHAR2 (10) NOT NULL,
EstadodePago VARCHAR2 (8) NOT NULL,
Banco VARCHAR2 (10) NOT NULL,
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_MPagoID
PRIMARY KEY (MPagoID)
);

ALTER TABLE METODOSDEPAGO
ADD CONSTRAINT FK_Cliente2
FOREIGN KEY (DUI)
REFERENCES Cliente(DUI);

ALTER TABLE METODOSDEPAGO
ADD CONSTRAINT FK_RUTA
FOREIGN KEY (RUTAID)
REFERENCES RUTA(RUTAID);

ALTER TABLE METODOSDEPAGO
ADD CONSTRAINT FK_RUTADETALLE
FOREIGN KEY (RUTADETALLEID)
REFERENCES RUTADETALLE(RUTADETALLEID);

create table RutaDetalle(
COMMENT ON TABLE RUTADETALLE IS 'TABLA QUE SIRVE PARA MOSTRAR TODOS LOS DATOS REFERENTES DETALLADOS DEL VIAJE'
RutadetalleID VARCHAR2 (12) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.RutadetalleID IS 'CAMPO PARA COMO NUMERO SECUENCIAL Y LLAVE PRIMARIA DE LA TABLA'
RutaID NCHAR (7) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.RutaID IS 'CAMPO DE LLAVE FORANEA QUE HACE REFERENCIA A LA RELACION CON LA TABLA PADRE LLAMADA RUTA'
Tarifa_por_Viaje NUMBER (3,2) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.Tarifa_por_Viaje IS 'CAMPO QUE MUESTRA LAS TARIFAS POR VIAJE'
Capacidad_vehiculo VARCHAR2 (8) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.Capacidad_vehiculo IS 'CAMPO DE LLAVE FORANEA QUE HACE REFERENCIA A LA CAPACIDAD QUE TIENEN LOS VEHICULOS DE LA FLOTA'
Matricula VARCHAR2 (12) NOT NULL,
COMMENT ON COLUMN RUTADETALLE.Matricula IS 'CAMPO DE LLAVE FORANEA QUE HACE REFERENCIA A LA RELACION CON LA TABLA LLAMADA FLOTA'
Usuario_creo VARCHAR2 (40),
COMMENT ON COLUMN RUTADETALLE.Usuario_creo IS 'CAMPO PARA SABER CUANDO SE CREO UN REGISTRO'
Fecha_creo DATE,
COMMENT ON COLUMN RUTADETALLE.Fecha_creo IS 'CAMPO PARA SABER LA FECHA DE CUANDO SE CREO UN REGISTRO'
Usuario_modi VARCHAR2 (40),
COMMENT ON COLUMN RUTADETALLE.Usuario_modi IS 'CAMPO PARA SABER CUANDO UN REGISTRO SE MODIFICA'
Fecha_modi DATE,
COMMENT ON COLUMN RUTADETALLE.Fecha_modi IS 'CAMPO PARA SABER CUANDO LA FECHA DE UN REGISTRO SE MODIFICA'
CONSTRAINT PK_RutadetalleID
PRIMARY KEY (RutadetalleID)
);

ALTER TABLE RUTADETALLE
ADD CONSTRAINT FK_RUTA2
FOREIGN KEY (RUTAID)
REFERENCES RUTA(RUTAID);

create table Aranceles(
Idaranceles VARCHAR2 (12) NOT NULL,
ViajeID VARCHAR2 (15) NOT NULL,
Costo_mayoresedad NUMBER (2,2),
Costo_menoresedad NUMBER (2,2),
Costo_entrada NUMBER (2,2),
Costo_Hospedaje NUMBER (3,2),
Costo_grupopersonas NUMBER (3,2),
Costo_por_vehiculo NUMBER (2,2),
Costo_carroextra NUMBER (2,2),
Usuario_creo VARCHAR2 (40),
Fecha_creo DATE,
Usuario_modi VARCHAR2 (40),
Fecha_modi DATE,
CONSTRAINT PK_IDaranceles
PRIMARY KEY (IDaranceles)
);

ALTER TABLE ARANCELES
ADD CONSTRAINT FK_Viaje2
FOREIGN KEY (ViajeID)
REFERENCES Viaje(ViajeID);

-- TRIGGER PARA TABLA CLIENTE AGREGAR
CREATE OR REPLACE TRIGGER TG_CLIENTE BEFORE INSERT 
ON  CLIENTE
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA UPDATE CLIENTE
CREATE OR REPLACE TRIGGER TG_CLIENTE 
BEFORE UPDATE 
ON CLIENTE 
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;



-- PROCEDIMIENTO ALMACENADO PARA AGREGAR CLIENTES
CREATE OR REPLACE PROCEDURE ADICIONA_CLIENTE (ADUI IN VARCHAR2, ANOMBRE IN VARCHAR2, ANUMEROTELEFONO IN VARCHAR2, ADIRECCION IN VARCHAR2,
ARESIDENCIA IN VARCHAR2, AEMAIL IN VARCHAR2, AGENERO IN CHAR, AESTADO IN VARCHAR2, ATIPODEPERSONAS IN VARCHAR2, AROL_USUARIO IN VARCHAR2) AS
IMP VARCHAR2(30);
BEGIN
  INSERT INTO CLIENTE (DUI, NOMBRE, NUMEROTELEFONO, DIRECCION, RESIDENCIA, EMAIL, GENERO, ESTADO,TIPODEPERSONAS, ROL_USUARIO) 
  VALUES (ADUI, ANOMBRE, ANUMEROTELEFONO, ADIRECCION, ARESIDENCIA, AEMAIL, AGENERO, AESTADO, ATIPODEPERSONAS, AROL_USUARIO);
  IMP := (SQL%ROWCOUNT||' REGISTRO INGRESADO');
  DBMS_OUTPUT.PUT_LINE(IMP);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('YA EXISTE UNA PERSONA CON ESE DUI');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL INGRESAR REGISTRO');
END;
-- EJECUTAR PARA ACTIVAR SALIDA
SET SERVEROUTPUT ON
-- EJECUTAR PROCEDIMIENTO
EXECUTE ADICIONA_CLIENTE ( '00129300-6', 'ISAAC', '70713269', 'NUEVA GUADALUPE', 'NUEVA GUADALUPE', 'isaac@gmail.com', 'M', 'ACTIVO', 'CLIENTE', 'CLI-01');
SELECT * FROM CLIENTE;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR CLIENTE
CREATE OR REPLACE PROCEDURE MODIFICA_CLIENTE  (EDUI IN VARCHAR2, ENOMBRE IN VARCHAR2, ENUMEROTELEFONO IN VARCHAR2, EDIRECCION IN VARCHAR2,
ERESIDENCIA IN VARCHAR2, EEMAIL IN VARCHAR2, EGENERO IN CHAR, EESTADO IN VARCHAR2, ETIPODEPERSONAS IN VARCHAR2, EROL_USUARIO IN VARCHAR2)
AS
ROWSM VARCHAR2(30);
BEGIN
  UPDATE CLIENTE SET NOMBRE = ENOMBRE, NUMEROTELEFONO = ENUMEROTELEFONO, DIRECCION = EDIRECCION ,RESIDENCIA = ERESIDENCIA, EMAIL = EEMAIL, 
  GENERO = EGENERO ,ESTADO = EESTADO, TIPODEPERSONAS = ETIPODEPERSONAS,  ROL_USUARIO = EROL_USUARIO WHERE DUI = EDUI;
  ROWSM := (SQL%ROWCOUNT||' REGISTRO ACTULIZADO');
  DBMS_OUTPUT.PUT_LINE(ROWSM);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;
-- EJECUTAR PROCEDIMIENTO
EXECUTE MODIFICA_PERSONA( 'ENOCSITO', '70713269', 'NUEVA GUADALUPE', 'NUEVA GUADALUPE', 'isaac@gmail.com', 'M', 'ACTIVO', 'CLIENTE', 'CLI-01', &DUI);

-- PROCEDIMIENTO ALMACENADO PARA ELIMINAR CLIENTE
CREATE OR REPLACE PROCEDURE ELIMINA_CLIENTE (IDUI IN VARCHAR)
AS
ROWSM VARCHAR2(30);
BEGIN
  DELETE FROM CLIENTE WHERE DUI = IDUI;
  ROWSM := (SQL%ROWCOUNT||' REGISTRO ELIMINADO');
  DBMS_OUTPUT.PUT_LINE(ROWSM);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ELIMINAR REGISTRO');
END;
-- EJECUTAR PROCEDIMIENTO
EXECUTE ELIMINA_CLIENTE(&DUI);

-- TABLAS TRANSACCIONALES
-- TRIGGER PARA TABLA RUTADETALLE
CREATE OR REPLACE TRIGGER TG_RUTADETALLE BEFORE INSERT 
ON RUTADETALLE
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_CREO,:NEW.FECHA_CREO
  FROM DUAL;
END;

-- TRIGGER PARA TABLA RUTADETALLE
CREATE OR REPLACE TRIGGER TG_RUTADETALLE BEFORE UPDATE 
ON RUTADETALLE
FOR EACH ROW
BEGIN
  SELECT USER,SYSDATE INTO:NEW.USUARIO_MODI,:NEW.FECHA_MODI
  FROM DUAL;
END;

-- PROCEDIMIENTO ALMACENADO INSERT
CREATE OR REPLACE PROCEDURE ADICIONA_ARANCELES (EIDARANCELES IN VARCHAR2, EVIAJEID IN VARCHAR2, ECOSTO_MAYORESEDAD IN NUMBER, ECOSTO_MENORESEDAD IN NUMBER,
ECOSTO_ENTRADA IN NUMBER, ECOSTO_HOSPEDAJE IN NUMBER, ECOSTO_GRUPOPERSONAS IN NUMBER, ECOSTO_POR_VEHICULO IN NUMBER, ECOSTO_CARROEXTRA IN NUMBER)
AS
ROWSM VARCHAR2(30);
NUID NUMBER(3);
BEGIN
SELECT IDARANCELES INTO NUID FROM ARANCELES WHERE IDARANCELES = EIDARANCELES;
  --IF SIDS = NULL
   -- THEN
      DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL REGISTRO ');
    --ELSE
      INSERT INTO ARANCELES (IDARANCELES, VIAJEID, COSTO_MAYORESEDAD, COSTO_MENORESEDAD, COSTO_ENTRADA, COSTO_HOSPEDAJE, COSTO_GRUPOPERSONAS, COSTO_POR_VEHICULO, COSTO_CARROEXTRA) 
      VALUES (EIDARANCELES, EVIAJEID, ECOSTO_MAYORESEDAD, ECOSTO_MENORESEDAD, ECOSTO_ENTRADA, ECOSTO_HOSPEDAJE, ECOSTO_GRUPOPERSONAS, ECOSTO_POR_VEHICULO, ECOSTO_CARROEXTRA)  ;
      ROWSM := (SQL%ROWCOUNT||' REGISTRO INSERTADO');
      DBMS_OUTPUT.PUT_LINE(ROWSM);
    --END IF;
EXCEPTION 
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR REGISTRO CON MISMO ID');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('NO SE PUEDE INSERTAR EL REGISTRO');
END;


-- EJECUTAR PROCEDIMIENTO
EXECUTE ADICIONA_ARANCELES(&VIAJEID, 1, '44', 3 ,2, 4, 5,6,4,1);

-- EJECUTAR PARA VER REGISTROS DE LA TABLA
SELECT * FROM ARANCELES;

-- PROCEDIMIENTO ALMACENADO PARA MODIFICAR ARANCELES
CREATE OR REPLACE PROCEDURE MODIFICA_ARANCELES (MIDARANCELES IN VARCHAR2,MVIAJEID IN VARCHAR2,MCOSTO_MAYORESEDAD IN NUMBER, MCOSTO_MENORESEDAD IN NUMBER,
MCOSTO_ENTRADA IN NUMBER, MCOSTO_HOSPEDAJE IN NUMBER, MCOSTO_GRUPOPERSONAS IN NUMBER, MCOSTO_POR_VEHICULO IN NUMBER, MCOSTO_CARROEXTRA IN NUMBER)
AS
ROWSM VARCHAR2(30);
NUID NUMBER(3);
BEGIN
  SELECT VIAJEID INTO NUID FROM VIAJE WHERE VIAJEID = MVIAJEID;
 DBMS_OUTPUT.PUT_LINE(NUID);
 IF NUID IS NULL THEN
  DBMS_OUTPUT.PUT_LINE('NO HAY NADA');
 ELSE
  UPDATE ARANCELES SET COSTO_MAYORESEDAD =  MCOSTO_MAYORESEDAD, COSTO_MENORESEDAD = MCOSTO_MENORESEDAD, COSTO_ENTRADA = MCOSTO_ENTRADA, COSTO_HOSPEDAJE = MCOSTO_HOSPEDAJE, COSTO_GRUPOPERSONAS = MCOSTO_GRUPOPERSONAS, COSTO_POR_VEHICULO = MCOSTO_POR_VEHICULO, COSTO_CARROEXTRA = MCOSTO_CARROEXTRA WHERE IDARANCELES = MIDARANCELES;
  ROWSM := (SQL%ROWCOUNT||' REGISTRO ACTUALIZADO');
  DBMS_OUTPUT.PUT_LINE(ROWSM);
  END IF;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('NO EXISTE ');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR AL ACTUALIZAR REGISTRO');
END;
-- EJECUTAR PROCEDIMIENTO
EXECUTE MODIFICA_ARANCELES ();
SELECT * FROM ARANCELES;
